@page "/updateClient"
@* @page "/updateClient/{id:int}" *@
@using Marchandises.Models
@using Marchandises.Services
@inject IClientCrud clientCrud
@inject NavigationManager Navigation
@inject ILogger<Client> logger
@rendermode InteractiveServer

<h3>Modifier un client</h3>
@if (Cl == null)
{
    <p>Le Client est inexistant</p>
}
else
{
    <EditForm Model="Cl" method="post" FormName="EditClient" OnValidSubmit="ModifierClient" Enhance>
        <DataAnnotationsValidator />
       <ValidationSummary/>

        <div class="mb-3">
            <input type="hidden" name="Cl.Id" class="form-control" value="@Cl.Id" />
        </div>
        <div class="mb-3">
            <label for="name" class="form-label">Nom :</label>
            <InputText @bind-Value="Cl.Nom" class="form-control" id="name" placeholder="Kossigan"></InputText>
            <ValidationMessage For="@(()=>Cl.Nom)" />
        </div>
        <div class="mb-3">
            <label for="tel" class="form-label">Telephone :</label>
            <InputText @bind-Value="Cl.Telephone" class="form-control" id="tel" placeholder="00000000"></InputText>
            <ValidationMessage For="@(()=>Cl.Telephone)" />
        </div>
        <div class="mb-3">
           <button type="submit" class="btn-dark">Editer</button>
        </div>


    </EditForm>
}


@code {

    [SupplyParameterFromForm(FormName = "EditClient")]
    public Client? Cl { get; set; }

    [SupplyParameterFromQuery]
    public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Cl = await clientCrud.GetClient(id);
    }

    public void verifier()
    {
        logger.LogInformation("Fonctionne");   
    }

    public async Task ModifierClient()
    {
        logger.LogInformation($"Client {Cl?.Nom}");
        bool result = await clientCrud.UpdateClient(Cl!);
        if (result)
        {
            Navigation.NavigateTo("/client");
        }
        else
        {
            // Gérer les erreurs ici
        }
    }
}
